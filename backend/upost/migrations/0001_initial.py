# Generated by Django 2.2.1 on 2019-06-07 22:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(db_column='First_Name', max_length=15)),
                ('middle_name', models.CharField(blank=True, db_column='Middle_Name', max_length=15, null=True)),
                ('last_name', models.CharField(db_column='Last_Name', max_length=25)),
                ('birth_date', models.DateField(db_column='Birth_Date', null=True)),
                ('country', models.CharField(db_column='Country', max_length=30)),
                ('state', models.CharField(db_column='State', max_length=30)),
                ('street_name', models.CharField(db_column='Street_Name', max_length=100)),
                ('postal_code', models.CharField(db_column='Postal_Code', max_length=6)),
                ('city', models.CharField(db_column='City', max_length=30)),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], db_column='Sex', max_length=1, null=True)),
                ('phone_number', models.CharField(blank=True, db_column='Phone_Number', max_length=10, null=True)),
                ('provider_level', models.IntegerField(blank=True, db_column='Provider_Level', default=0, null=True)),
                ('last_payment_date', models.DateField(blank=True, db_column='Last_Payment_Date', null=True)),
                ('is_superuser', models.NullBooleanField(default=False)),
                ('is_staff', models.NullBooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'CustomUser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContentChannel',
            fields=[
                ('channel_id', models.AutoField(db_column='Channel_ID', primary_key=True, serialize=False)),
                ('channel_name', models.CharField(db_column='Channel_Name', max_length=50, unique=True)),
                ('deleted_flag', models.BooleanField(blank=True, db_column='Deleted_Flag', default=False)),
                ('creation_date', models.DateField(auto_now_add=True, db_column='Creation_Date')),
                ('deletion_date', models.DateField(blank=True, db_column='Deletion_Date', null=True)),
                ('channel_description', models.CharField(blank=True, db_column='Channel_Description', default='', max_length=500, null=True)),
                ('user', models.ForeignKey(db_column='USER_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='channels', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'content_channel',
            },
        ),
        migrations.CreateModel(
            name='DietOption',
            fields=[
                ('diet_option', models.CharField(db_column='Dietary_option', max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'diet_options',
            },
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('interest_tag', models.CharField(db_column='Interest_tag', max_length=50, primary_key=True, serialize=False)),
                ('description', models.CharField(default='description', max_length=50)),
                ('image', models.ImageField(null=True, upload_to='interests')),
            ],
            options={
                'db_table': 'interest',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(db_column='Post_ID', primary_key=True, serialize=False)),
                ('post_title', models.CharField(db_column='Post_title', max_length=50, unique=True)),
                ('poster_name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(db_column='Phone_number', max_length=10)),
                ('email', models.EmailField(db_column='Email', max_length=50)),
                ('post_description', models.CharField(db_column='Post_description', max_length=500)),
                ('cost', models.IntegerField(blank=True, db_column='Cost', null=True)),
                ('post_timestamp', models.DateTimeField(auto_now_add=True)),
                ('deleted_flag', models.BooleanField(blank=True, db_column='Deleted_Flag', default=False)),
                ('channel', models.ForeignKey(db_column='Channel_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='channel_posts', to='upost.ContentChannel')),
                ('tags', models.ManyToManyField(db_table='post_tags', to='upost.Interest')),
                ('user', models.ForeignKey(db_column='User_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='IncentivePackage',
            fields=[
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='incentive', serialize=False, to='upost.Post')),
                ('is_marketing', models.BooleanField(db_column='Is_marketing')),
                ('is_food', models.BooleanField(db_column='Is_Food')),
                ('ip_description', models.CharField(db_column='Ip_description', max_length=500)),
            ],
            options={
                'db_table': 'incentive_package',
            },
        ),
        migrations.CreateModel(
            name='PostEvent',
            fields=[
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='post_event', serialize=False, to='upost.Post')),
                ('location', models.CharField(db_column='Location', max_length=50)),
                ('capacity', models.IntegerField(db_column='Capacity')),
                ('planned_start_date', models.DateField(db_column='Planned_start_date')),
                ('planned_start_time', models.TimeField(db_column='Planned_start_time')),
                ('planned_end_date', models.DateField(db_column='Planned_end_date')),
                ('planned_end_time', models.TimeField(db_column='Planned_end_time')),
            ],
            options={
                'db_table': 'post_event',
            },
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('viewID', models.AutoField(db_column='viewID', primary_key=True, serialize=False)),
                ('view_time_stamp', models.DateTimeField(auto_now_add=True, db_column='view_Time_Stamp')),
                ('post', models.ForeignKey(db_column='Post_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='upost.Post')),
                ('user', models.ForeignKey(db_column='User_ID', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'view',
                'unique_together': {('user', 'post', 'view_time_stamp')},
            },
        ),
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('subscribe_id', models.AutoField(db_column='subscribe_id', primary_key=True, serialize=False)),
                ('subscription_date', models.DateField(auto_now_add=True, db_column='Subscription_Date')),
                ('unsubscribe_date', models.DateField(blank=True, db_column='Unsubscribe_date', null=True)),
                ('channel', models.ForeignKey(db_column='Channel_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='upost.ContentChannel')),
                ('community_member', models.ForeignKey(db_column='Community_Member_ID', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subscribe',
                'unique_together': {('channel', 'community_member')},
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='interests',
            field=models.ManyToManyField(blank=True, to='upost.Interest'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='subscriptions',
            field=models.ManyToManyField(through='upost.Subscribe', to='upost.ContentChannel'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='views',
            field=models.ManyToManyField(through='upost.View', to='upost.Post'),
        ),
        migrations.CreateModel(
            name='EventContent',
            fields=[
                ('post_event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='content', serialize=False, to='upost.PostEvent')),
                ('post_event_content', models.CharField(blank=True, db_column='Post_Event_Content', max_length=200, null=True)),
            ],
            options={
                'db_table': 'event_content',
            },
        ),
        migrations.CreateModel(
            name='Marketing',
            fields=[
                ('incentive_package', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='marketing', serialize=False, to='upost.IncentivePackage')),
                ('planned_start_date', models.DateField(db_column='Planned_start_date')),
                ('planned_start_time', models.TimeField(db_column='Planned_start_time')),
                ('planned_end_date', models.DateField(db_column='Planned_end_date')),
                ('planned_end_time', models.TimeField(db_column='Planned_end_time')),
            ],
            options={
                'db_table': 'marketing',
            },
        ),
        migrations.CreateModel(
            name='UsedBy',
            fields=[
                ('usedbyID', models.AutoField(db_column='usedbyID', primary_key=True, serialize=False)),
                ('wellbeing_comment', models.CharField(blank=True, db_column='Wellbeing_comment', max_length=500, null=True)),
                ('wellbeing_input', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], db_column='Wellbeing_input')),
                ('user', models.ForeignKey(db_column='User_ID', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='Post_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='upost.PostEvent')),
            ],
            options={
                'db_table': 'used_by',
                'unique_together': {('user', 'post')},
            },
        ),
        migrations.CreateModel(
            name='Rate',
            fields=[
                ('rate_id', models.AutoField(db_column='rate_ID', primary_key=True, serialize=False)),
                ('event_rating', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], db_column='Event_Rating')),
                ('user', models.ForeignKey(db_column='User_ID', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='Post_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='ratings', to='upost.PostEvent')),
            ],
            options={
                'db_table': 'rates',
                'unique_together': {('post', 'user')},
            },
        ),
        migrations.CreateModel(
            name='AttendanceStrike',
            fields=[
                ('strike_id', models.AutoField(db_column='strike_ID', primary_key=True, serialize=False)),
                ('strike', models.IntegerField(choices=[(1, 1)], db_column='Strike')),
                ('user_to_strike', models.ForeignKey(db_column='User_ID', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='Post_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='upost.PostEvent')),
            ],
            options={
                'db_table': 'attendance_strike',
                'unique_together': {('post', 'user_to_strike')},
            },
        ),
        migrations.CreateModel(
            name='Attend',
            fields=[
                ('attendID', models.AutoField(db_column='attend_ID', primary_key=True, serialize=False)),
                ('attendance_status', models.CharField(choices=[('Pending', 'Pending'), ('Attended', 'Attended'), ('No Showed', 'No Showed')], max_length=20)),
                ('attendee', models.ForeignKey(db_column='User_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='attendee', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='Post_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_to_attend', to='upost.PostEvent')),
            ],
            options={
                'db_table': 'attend',
                'unique_together': {('post', 'attendee')},
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='attendance_strikes',
            field=models.ManyToManyField(related_name='attendee_to_strike', through='upost.AttendanceStrike', to='upost.PostEvent'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='attends',
            field=models.ManyToManyField(related_name='attendee', through='upost.Attend', to='upost.PostEvent'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='rates',
            field=models.ManyToManyField(related_name='rater', through='upost.Rate', to='upost.PostEvent'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='uses',
            field=models.ManyToManyField(through='upost.UsedBy', to='upost.PostEvent'),
        ),
        migrations.CreateModel(
            name='FoodDonation',
            fields=[
                ('incentive_package', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='food', serialize=False, to='upost.IncentivePackage')),
                ('planned_start_date', models.DateField(db_column='Planned_start_date')),
                ('planned_start_time', models.TimeField(db_column='Planned_start_time')),
                ('planned_end_date', models.DateField(db_column='Planned_end_date')),
                ('planned_end_time', models.TimeField(db_column='Planned_end_time')),
                ('diet_option', models.ManyToManyField(db_table='food_donation_diet_option', to='upost.DietOption')),
            ],
            options={
                'db_table': 'food_donation',
            },
        ),
    ]
